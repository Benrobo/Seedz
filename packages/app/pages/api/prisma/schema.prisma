generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    MERCHANT
    SUPPLIER
    BUYER
}

model Users {
    id              String            @id @unique
    email           String            @unique
    username        String
    fullname        String
    role            Role              @default(BUYER)
    image           String
    deliveryAddress DeliveryAddress[]
    transactions    Transaction[]
    ratings         ProductsRating[]
    wallet          Wallet?
}

model DeliveryAddress {
    id         String @id
    userId     String
    user       Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
    street     String
    city       String
    state      String
    postalCode String
    country    String
}

model Wallet {
    id         String  @id
    userId     String  @unique
    user       Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
    balance    Float   @default(0)
    currency   String
    paystackId String? // Store Paystack's unique identifier for the user's wallet
    // Add other fields relevant to wallet management, such as transaction history, etc.
}

model Transaction {
    id          String   @id @unique
    userId      String
    user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
    type        String // 'purchase', 'topup', etc.
    amount      Float
    description String
    createdAt   DateTime @default(now())
}

// I Plan to store AI Assistant responses in client localstorage
model Products {
    id               String           @id
    userId           String
    name             String
    description      String
    quantity         Int
    price            Int
    currency         String
    type             String // 'farm_produce', 'farm_machinery'
    availableForRent Boolean
    rentingPrice     Int
    images           String[]
    ratings          ProductsRating[]
}

model ProductsRating {
    id     String @id
    userId String
    rate   Int

    product Products @relation(fields: [id], references: [id], onDelete: Cascade)
    user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
